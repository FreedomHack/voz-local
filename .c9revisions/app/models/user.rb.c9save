{"ts":1376229987388,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class User < ActiveRecord::Base\n\n\tattr_accessor :password\n    attr_accessible :email, :password, :password_confirmation, :first_name, :last_name\n\n    before_save :encrypt_password\n\n    validates_confirmation_of :password\n    validates_presence_of :password, :on => :create\n\n    validates :email, :presence => true,\n    \t\t\t\t   :uniqueness => true\n\n \tvalidates_presence_of :first_name\n \tvalidates_presence_of :last_name\n\n \t# Authenticate a user against a password.  Return the user object if the user\n \t# is authenticated.\n \tdef self.authenticate(email, password)\n \t\tuser = find_by_email(email);\n \t\tif user && user.password_hash == BCrypt::Engine.hash_secret(password, user.password_salt);\n \t\t\treturn user\n \t\telse\n \t\t\treturn nil\n \t\tend\n \tend\n\n \t# Encrypts a password before saving a User object to the database\n \tdef encrypt_password\n \t\tif password.present?\n \t\t\tself.password_salt = BCrypt::Engine.generate_salt\n \t\t\tself.password_hash = BCrypt::Engine.hash_secret(password, password_salt)\n \t\tend\n \tend\n\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":1005}]],"length":1005}
